{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 						
\b\fs28 Classes
\b0\fs24  \
\
\
   * Java is an object oriented language \
\
  *  Objects encapsulates data operations and usage semantics \
 	\
	-  Allows storage and manipulation details to be hidden \
	- separates what is to be done from how it is done \
\
  * Classes provide a structure for describing and creating objects \
\
  * A class is a template for creating an object \
	- Declared with the class keyword followed by the class name \
	- Java source file name normally has same name as the class \
          \
\
   * A Class is made up of both statement and executable code \
	- fields \
	 	* Stored object state \
		int passenger; and int seats; are both considered Fields \
\
	- Methods \
		* executable code that manipulates state and performs operations\
		\
	- Constructors \
		* Executable code used during object creation to set the initial state \
			EX:\
				Flight() \{\
					seats = 150;\
					passengers = 0;\
				\}\
\
\

\b\fs28 						Using Classes \

\b0\fs24   * use the new keyword to create an instances \'93copy\'94 or aka object of a certain class \
\
  * Classes are Reference types \
 \
\
					Encapsulation and access modifiers \
\
The internal representation an object is general you can only see it only in the package \
\
If we use private package it would be considered no access modifier\
\
Public is visibly everywhere \
\
Private only within its own class \
\
					Naming classes\
\
 * Class names follow the same rules as variable names \
 * class name conventions are similar to variables with some differences \
	- use only letters and numbers \
	- first character is always a letter\
	-\
			            	method basics \
Each method has a name  \
We should use a verb or a action word \
Return types \
	use void when no value is returned \
\
Typed parameter list \
	can be empty \
\
\
				exiting from a method \
\
A method exits for one of three reasons \
	the end of the method is reached \
	a return statement is encountered \
	a error happened \
		\
			Method return value \
\
A method returns a single value \
	a primitive value \
	a reference to an object \
	a reference to an array \
		arrays are objects \
			\
				Special References this and null\
Java provides special references  with predefined meanings \
	- this is and implicit reference to the current object\
		- useful for reducing ambiguity \
		- allows an object to pass itself as a parameter \
\
	- null is a reference literal\
		- Represents and uncreated object\
		- can be assigned to any reference variable \
\
				Field Encapsulation \
In most cases a class fields should not be directly accessible outside of the class \
	Helps to hide implementation details \
\
				Accessors and mutators \
Use the accessors/mutator  pattern to control field access \
	- Accessor retrieves field value \
	- also called getter \
	- method name getFieldName \
   Mutator modifies field value \
	also called setter \
	method name: setFieldName \
\
}